using System.Text.RegularExpressions;
using Voxta.Abstractions.Chats.Sessions;
using Voxta.Abstractions.Model;
using Voxta.Abstractions.Services.ChatAugmentations;
using Voxta.Abstractions.Chats.Objects.Characters;
using Voxta.Abstractions.Configuration;
using Voxta.Abstractions.Scripting.ActionScripts;
using Voxta.Model.Shared;
using Voxta.Model.WebsocketMessages.ClientMessages;
using Voxta.Model.WebsocketMessages.ServerMessages;
using Voxta.Modules.Aios.Spotify.Clients.Handlers;
using Voxta.Modules.Aios.Spotify.Clients.Services;

namespace Voxta.Modules.Aios.Spotify.ChatAugmentations;

public class SpotifyChatAugmentationsServiceInstance(
    IChatSessionChatAugmentationApi session,
    SpotifyChatAugmentationSettings settings,
    SpotifyPlaybackMonitor spotifyPlaybackMonitor,
    SpotifyActionHandler spotifyActionHandler,
    IServicesConfigurationsSetResolver servicesConfigurationsSetResolver
    ) : IActionInferenceAugmentation, IChatScriptEventsAugmentation
{
    public ServiceTypes[] GetRequiredServiceTypes() => [ServiceTypes.ActionInference];
    public string[] GetAugmentationNames() => [VoxtaModule.AugmentationKey];
    private readonly CancellationTokenSource _cts = new();
    private readonly IServicesConfigurationsSetResolver _servicesConfigurationsSetResolver = servicesConfigurationsSetResolver;
    private Task? _monitorTask;
    private bool _disposed;

    public void Initialize()
    {
        ObjectDisposedException.ThrowIf(_disposed, nameof(SpotifyChatAugmentationsServiceInstance));
        _monitorTask = spotifyPlaybackMonitor.MonitorSpotifyPlayback(_cts.Token);
    }
    
    public IEnumerable<ClientUpdateContextMessage> RegisterChatContext()
    {
        return
        [
            new ClientUpdateContextMessage
            {
                ContextKey = VoxtaModule.ServiceName,
                SessionId = session.SessionId,
                Actions =
                [
                    new()
                    {
                        Name = "toggle_playback",
                        Layer = "SpotifyControl",
                        ShortDescription = "play or pause music",
                        Description = "When {{ user }} asks to toggle music playback (play, pause, stop, resume, etc.).",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("play|pause|stop|continue|toggle|playback|music") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                    },
                    new()
                    {
                        Name = "spotify_connect",
                        Layer = "SpotifyControl",
                        ShortDescription = "anything regarding spotify",
                        Description = "When {{ user }} asks to interact with spotify in any way, like playing music, search for an artist, etc.",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("play|pause|stop|spotify|playback|music|songs?|tracks?|albums?|artists?|playlists?|show?|episode?|genre|volume|loud|louder|quiet|quieter|increase|decrease|reduce") ] : null,
                        FlagsFilter = "spotify_disconnected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                    },
                    new()
                    {
                        Name = "play_random_music",
                        Layer = "SpotifyControl",
                        ShortDescription = "play random music",
                        Description = "When {{ user }} asks to play music without mentioning the artist or song.",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("surprise|random|select|choose|pick") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                    },
                    new() {
                        Name = "play_special_playlist",
                        Layer = "SpotifyControl",
                        ShortDescription = "Play one of the userâ€™s special Spotify playlists.",
                        Description = $"When {{ user }} asks to play a special playlist generated by Spotify for them. " +
                                      $"Available playlists: {string.Join(", ", settings.SpecialPlaylists.Keys)}.",
                        MatchFilter = settings.EnableMatchFilter 
                            ? [ BuildMatchPattern(string.Join("|", settings.SpecialPlaylists.Keys.Select(Regex.Escape))) ] 
                            : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments = [
                            new FunctionArgumentDefinition {
                                Name = "name",
                                Description = $"The name of the special playlist the user requested. " +
                                              $"Options: {string.Join(", ", settings.SpecialPlaylists.Keys)}.",
                                Required = true,
                                Type = FunctionArgumentType.String,
                            }
                        ],
                    },
                    new() {
                        Name = "play_music",
                        Layer = "SpotifyControl",
                        ShortDescription = "play requested music",
                        Description = "When {{ user }} asks to play a track, album, artist, playlist, show or episode. Select all details you can find from the request.",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("play|music|songs?|tracks?|albums?|artists?|playlists?|show?|episode?|genre") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments = [
                            new FunctionArgumentDefinition {
                                Name = "name",
                                Description = "Select all relevant information, like track, album, artist, playlist, show or episode name {{ user }} asked for, so the system can find the right music.",
                                Required = true,
                                Type = FunctionArgumentType.String,
                            },
                            new FunctionArgumentDefinition {
                                Name = "type",
                                Description = "The type of music entity requested: track, album, artist, playlist, show, episode, genre.",
                                Required = true,
                                Type = FunctionArgumentType.String,
                            },
                        ],
                    },
                    new () {
                        Name = "queue_track",
                        Layer = "SpotifyControl",
                        ShortDescription = "Queue a track for later",
                        Description = "When {{ user }} wants to add a album, artist, episode, playlist, show or track to the queue. Select all track details you can find from the request.",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("queue|add|to queue|next up") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments = [
                            new FunctionArgumentDefinition {
                                Name = "name",
                                Description = "Select all relevant information, like track, album and artist name {{ user }} asked for in the format <artist> <track> <album>, if available so the system can find the right music.",
                                Required = true,
                                Type = FunctionArgumentType.String,
                            }
                        ],
                    },
                    new()
                    {
                        Name = "volume",
                        Layer = "SpotifyControl",
                        ShortDescription = "change volume",
                        Description = "When {{ user }} asks to set the volume to a specific level, or increase/decrease it. Use 'set' for absolute volume, 'increase' or 'decrease' for relative changes.",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("volume|loud|louder|quiet|quieter|increase|decrease|reduce|(?:turn up)|(?:turn down)") ] : null,
                        FlagsFilter = "playing",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments =
                        [
                            new FunctionArgumentDefinition
                            {
                                Name = "type",
                                Description = "The type of volume change: 'set', 'increase', or 'decrease'.",
                                Required = true,
                                Type = FunctionArgumentType.String,
                            },
                            new FunctionArgumentDefinition
                            {
                                Name = "value",
                                Description = "The value for the volume change (e.g., percentage for 'set', percentage points for 'increase'/'decrease'). Optional for 'increase'/'decrease' (defaults to 10).",
                                Required = false,
                                Type = FunctionArgumentType.Integer,
                            }
                        ],
                    },
                    new()
                    {
                        Name = "seek_playback",
                        Layer = "SpotifyControl",
                        ShortDescription = "seek through the track",
                        Description = "When {{ user }} asks go to (seek) a specific position within the current track. Use 'forward' or 'backward' for relative seeks, 'to_time' for absolute time (e.g., 1 minute 30 seconds), 'to_percent' for percentage (e.g., 50%), or 'middle' for the midpoint.",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("seek|skip|jump|forward|backward|go to") ] : null,
                        FlagsFilter = "playing",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments =
                        [
                            new FunctionArgumentDefinition
                            {
                                Name = "target",
                                Description = "The type of seek: 'forward', 'backward', 'to_time', 'to_percent', or 'middle'.",
                                Required = true,
                                Type = FunctionArgumentType.String,
                            },
                            new FunctionArgumentDefinition
                            {
                                Name = "value",
                                Description = "The value for the target (e.g., seconds for 'forward'/'backward', total seconds for 'to_time', percentage for 'to_percent'). Not needed for 'middle'.",
                                Required = false,
                                Type = FunctionArgumentType.Integer,
                            }
                        ],
                    },
                    new()
                    {
                        Name = "skip_next",
                        Layer = "SpotifyControl",
                        ShortDescription = "skip to the next track",
                        Description = "When {{ user }} asks to skip to next track/song/title.",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("next|skip|forward|songs?|tracks?|titles?") ] : null,
                        FlagsFilter = "playing",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                    },
                    new()
                    {
                        Name = "skip_previous",
                        Layer = "SpotifyControl",
                        ShortDescription = "skip to the previous track",
                        Description = "When {{ user }} asks to skip to the previous track/song/title.",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("previous|skip|backward|songs?|tracks?|titles?") ] : null,
                        FlagsFilter = "playing",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                    },
                    new()
                    {
                        Name = "repeat_mode",
                        Layer = "SpotifyControl",
                        ShortDescription = "change the repeat mode",
                        Description = "When {{ user }} asks to change the repeat mode to one of the following track, context or off",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("repeat|tracks?|context|off|none|disable|enable") ] : null,
                        FlagsFilter = "playing",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments =
                            [
                                new FunctionArgumentDefinition
                                {
                                    Name = "mode",
                                    Description = "it must be one of those: [track, context, off]",
                                    Required = true,
                                    Type = FunctionArgumentType.String,
                                }
                            ],
                    },
                    new()
                    {
                        Name = "shuffle_mode",
                        Layer = "SpotifyControl",
                        ShortDescription = "change the shuffle mode",
                        Description = "When {{ user }} asks to change the shuffle mode on or off",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("shuffle|on|off|enable|disable") ] : null,
                        FlagsFilter = "playing",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments =
                            [
                                new FunctionArgumentDefinition
                                {
                                    Name = "mode",
                                    Description = "Select on or off based on {{ user }}s requested",
                                    Required = true,
                                    Type = FunctionArgumentType.String,
                                }
                            ],
                    },
                    new()
                    {
                        Name = "add_to_favorites",
                        Layer = "SpotifyControl",
                        ShortDescription = "Add the currently playing track to Favorites (Liked Songs)",
                        Description = "When {{ user }} asks to like, favorite, love, or save the currently playing track to their library",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern(@"like|favorites?|favourites?|love|save|like|add\s+to\s+(?:favorites?|library|liked\s+songs)") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                    },
                    new()
                    {
                        Name = "get_playlists",
                        Layer = "SpotifyControl",
                        ShortDescription = "list all available playlists",
                        Description = "When {{ user }} asks to list all available playlists",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("playlists?|list|show|get|available") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                    },
                    new()
                    {
                        Name = "add_to_playlist",
                        Layer = "SpotifyControl",
                        ShortDescription = "add to playlist",
                        Description = "When {{ user }} asks to add the current song to a specific playlist",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("add|playlists?|songs?|tracks?") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments =
                            [
                                new FunctionArgumentDefinition
                                {
                                    Name = "playlist",
                                    Description = "Select the playlist name based {{ user }} requested",
                                    Required = true,
                                    Type = FunctionArgumentType.String,
                                }
                            ],
                    },
                    new()
                    {
                        Name = "list_devices",
                        Layer = "SpotifyControl",
                        ShortDescription = "list all available devices",
                        Description = "When {{ user }} asks to list all available devices",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("devices?|lists?|show") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                    },
                    new()
                    {
                        Name = "transfer_to_device",
                        Layer = "SpotifyControl",
                        ShortDescription = "transfer to device",
                        Description = "When {{ user }} asks to transfer playback to a specific device",
                        MatchFilter = settings.EnableMatchFilter ? [ BuildMatchPattern("transfer|devices?|move|playback") ] : null,
                        FlagsFilter = "spotify_connected",
                        Timing = FunctionTiming.AfterUserMessage,
                        CancelReply = true,
                        Arguments =
                            [
                                new FunctionArgumentDefinition
                                {
                                    Name = "device",
                                    Description = "Select the device name based {{ user }} requested",
                                    Required = true,
                                    Type = FunctionArgumentType.String,
                                }
                            ],
                    }
                ]
            }
        ];
    }
    
    private string BuildMatchPattern(string pattern)
    {
        return string.IsNullOrEmpty(settings.MatchFilterWakeWord)
            ? $@"\b(?:{pattern})\b"
            : $@"(?i)(?=.*\b{settings.MatchFilterWakeWord}\b)(?:.*\b(?:{pattern})\b)";
    }
    
    public async ValueTask<bool> TryHandleActionInference(
        ChatMessageData? message,
        ServerActionMessage serverActionMessage,
        CancellationToken cancellationToken
    )
    {
        if (serverActionMessage.ContextKey != VoxtaModule.ServiceName)
            return false;
        await spotifyActionHandler.HandleAction(serverActionMessage, cancellationToken);
        return true;
    }
    
    public async Task OnChatScriptEvent(
        IActionScriptEvent e,
        ChatMessageData? message,
        ICharacterOrUserData character,
        CancellationToken cancellationToken
    )
    {
        if (!settings.EnableVolumeControlDuringSpeech) return;

        switch (e)
        {
            case TranscriptionStartedScriptEvent:
                await spotifyActionHandler.LowerVolumeAsync(cancellationToken);
                break;

            case TranscriptionFinishedScriptEvent:
                await spotifyActionHandler.RestoreVolumeAsync(cancellationToken);
                break;

            case SpeechStartActionScriptEvent:
                if (!await IsTextToSpeechActiveAsync(cancellationToken)) break;
                await spotifyActionHandler.LowerVolumeAsync(cancellationToken);
                break;

            case SpeechCompleteActionScriptEvent:
                if (!await IsTextToSpeechActiveAsync(cancellationToken)) break;
                await spotifyActionHandler.RestoreVolumeAsync(cancellationToken);
                break;
        }
    }
    
    private async Task<bool> IsTextToSpeechActiveAsync(CancellationToken cancellationToken)
    {
        var ttsConfig = await _servicesConfigurationsSetResolver.ResolveOneWithDefaultConfigAsync(
            session.User.Id,
            ServiceTypes.TextToSpeech,
            cancellationToken
        );
        
        return ttsConfig.Module != null
               && ttsConfig.Settings?.ServiceSettings.TryGetValue("enabled", out var enabledValue) == true
               && bool.TryParse(enabledValue, out var enabled)
               && enabled;
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_disposed) return;
        _disposed = true;
        await _cts.CancelAsync();
        if (_monitorTask != null)
            await _monitorTask;
        _cts.Dispose();
    }
}